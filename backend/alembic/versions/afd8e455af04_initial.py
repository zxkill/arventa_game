"""initial

Revision ID: afd8e455af04
Revises: 
Create Date: 2024-12-17 11:13:26.104148

"""
from typing import Sequence, Union

from geoalchemy2 import Geography

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'afd8e455af04'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # Добавляем поддержку PostGIS (если не включено)
    op.execute("CREATE EXTENSION IF NOT EXISTS postgis")
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
                    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('users_id_seq'::regclass)"),
                              autoincrement=True, nullable=False),
                    sa.Column('username', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
                    sa.Column('email', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
                    sa.Column('password_hash', sa.TEXT(), autoincrement=False, nullable=False),
                    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'),
                              autoincrement=False, nullable=True),
                    sa.Column('last_login', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
                    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False,
                              nullable=True),
                    sa.Column('role', sa.VARCHAR(length=20), server_default=sa.text("'player'::character varying"),
                              autoincrement=False, nullable=True),
                    sa.PrimaryKeyConstraint('id', name='users_pkey'),
                    sa.UniqueConstraint('email', name='users_email_key'),
                    sa.UniqueConstraint('username', name='users_username_key'),
                    postgresql_ignore_search_path=False
                    )
    op.create_table('player_coordinates_history',
                    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
                    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
                    sa.Column('coordinates', Geography(geometry_type='POINT', srid=4326), nullable=False),
                    sa.Column('timestamp', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'),
                              autoincrement=False, nullable=False),
                    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='player_coordinates_history_user_id_fkey',
                                            ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id', name='player_coordinates_history_pkey')
                    )
    op.create_table('quests',
                    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
                    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
                    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
                    sa.Column('reward', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
                    sa.Column('is_repeatable', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False,
                              nullable=True),
                    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'),
                              autoincrement=False, nullable=True),
                    sa.PrimaryKeyConstraint('id', name='quests_pkey')
                    )
    op.create_table('user_quests',
                    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
                    sa.Column('quest_id', sa.INTEGER(), autoincrement=False, nullable=False),
                    sa.Column('status', sa.VARCHAR(length=20),
                              server_default=sa.text("'in_progress'::character varying"), autoincrement=False,
                              nullable=True),
                    sa.Column('started_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'),
                              autoincrement=False, nullable=True),
                    sa.Column('completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
                    sa.ForeignKeyConstraint(['quest_id'], ['quests.id'], name='user_quests_quest_id_fkey',
                                            ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_quests_user_id_fkey',
                                            ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('user_id', 'quest_id', name='user_quests_pkey')
                    )
    op.create_table('guilds',
                    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('guilds_id_seq'::regclass)"),
                              autoincrement=True, nullable=False),
                    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
                    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
                    sa.Column('leader_id', sa.INTEGER(), autoincrement=False, nullable=True),
                    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'),
                              autoincrement=False, nullable=True),
                    sa.ForeignKeyConstraint(['leader_id'], ['users.id'], name='guilds_leader_id_fkey',
                                            ondelete='SET NULL'),
                    sa.PrimaryKeyConstraint('id', name='guilds_pkey'),
                    sa.UniqueConstraint('name', name='guilds_name_key'),
                    postgresql_ignore_search_path=False
                    )
    op.create_table('logs',
                    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
                    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
                    sa.Column('action', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
                    sa.Column('details', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
                    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'),
                              autoincrement=False, nullable=True),
                    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='logs_user_id_fkey', ondelete='SET NULL'),
                    sa.PrimaryKeyConstraint('id', name='logs_pkey')
                    )
    op.create_table('items',
                    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
                    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
                    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
                    sa.Column('type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
                    sa.Column('rarity', sa.VARCHAR(length=20), server_default=sa.text("'common'::character varying"),
                              autoincrement=False, nullable=True),
                    sa.Column('attributes', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False,
                              nullable=True),
                    sa.PrimaryKeyConstraint('id', name='items_pkey')
                    )
    op.create_table('inventory',
                    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
                    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
                    sa.Column('item_id', sa.INTEGER(), autoincrement=False, nullable=False),
                    sa.Column('quantity', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False,
                              nullable=True),
                    sa.Column('acquired_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'),
                              autoincrement=False, nullable=True),
                    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='inventory_user_id_fkey',
                                            ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id', name='inventory_pkey')
                    )
    op.create_table('guild_members',
                    sa.Column('guild_id', sa.INTEGER(), autoincrement=False, nullable=False),
                    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
                    sa.Column('role', sa.VARCHAR(length=20), server_default=sa.text("'member'::character varying"),
                              autoincrement=False, nullable=True),
                    sa.Column('joined_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'),
                              autoincrement=False, nullable=True),
                    sa.ForeignKeyConstraint(['guild_id'], ['guilds.id'], name='guild_members_guild_id_fkey',
                                            ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='guild_members_user_id_fkey',
                                            ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('guild_id', 'user_id', name='guild_members_pkey')
                    )
    op.create_table('user_profiles',
                    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
                    sa.Column('avatar_url', sa.TEXT(), autoincrement=False, nullable=True),
                    sa.Column('bio', sa.TEXT(), autoincrement=False, nullable=True),
                    sa.Column('experience', sa.BIGINT(), server_default=sa.text('0'), autoincrement=False,
                              nullable=True),
                    sa.Column('level', sa.INTEGER(), server_default=sa.text('1'), autoincrement=False, nullable=True),
                    sa.Column('premium_until', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
                    sa.Column('gold_coins', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False,
                              nullable=True),
                    sa.Column('silver_coins', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False,
                              nullable=True),
                    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='user_profiles_user_id_fkey',
                                            ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('user_id', name='user_profiles_pkey')
                    )
    op.create_table('sessions',
                    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
                    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
                    sa.Column('token', sa.TEXT(), autoincrement=False, nullable=False),
                    sa.Column('refresh_token', sa.TEXT(), autoincrement=False, nullable=False),
                    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
                    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'),
                              autoincrement=False, nullable=True),
                    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='sessions_user_id_fkey',
                                            ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id', name='sessions_pkey')
                    )
    op.create_table('friends',
                    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
                    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
                    sa.Column('friend_id', sa.INTEGER(), autoincrement=False, nullable=True),
                    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'pending'::character varying"),
                              autoincrement=False, nullable=True),
                    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'),
                              autoincrement=False, nullable=True),
                    sa.ForeignKeyConstraint(['friend_id'], ['users.id'], name='friends_friend_id_fkey',
                                            ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='friends_user_id_fkey', ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id', name='friends_pkey')
                    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('friends')
    op.drop_table('sessions')
    op.drop_table('user_profiles')
    op.drop_table('guild_members')
    op.drop_table('users')
    op.drop_table('inventory')
    op.drop_table('items')
    op.drop_table('quests')
    op.drop_table('logs')
    op.drop_table('guilds')
    op.drop_table('user_quests')
    op.drop_table('player_coordinates_history')
    # ### end Alembic commands ###
